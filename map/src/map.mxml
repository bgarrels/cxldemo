<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
				layout="absolute"
				fontSize="12"
				xmlns:control="controls.*"
				resize="onApplicationReSize(event);"
				creationComplete="onload(event);"
				xmlns:local="*">
	<mx:Script source="addNewItem.as"/>
	<mx:Script source="readWrite.as"/>
	<mx:Script source="mouseEvent.as"/>
	<mx:Script source="Properties.as"/>
	<mx:Script>
		<![CDATA[
			import components.ItemBox;
			import mx.events.DataGridEvent;
			import mx.controls.TextInput;
			import mx.events.ItemClickEvent;
			import util.Utils;
			import mx.collections.ArrayCollection;
			import components.ItemArrowLine;
			import mx.events.ResizeEvent;
			import events.IconEvent;
			import components.ItemControl;
			import components.RectBorder;
			import components.BorderSprite;
			import mx.controls.Image;
			import mx.controls.Alert;
			import mx.events.ListEvent;
			import PropertyEditor;
			import Data.*;

			private var pTreapAttract:Treap=new Treap(); //吸引关联控制点
			private var pTreapControl:Treap=new Treap(); //存储所有的图片

			private var pTreapItem:Treap=new Treap(); //存储所有的ItemBox

			private var iconPressable:Boolean=false; //存储图标的按下状态

			//图标右键菜单
			[Bindable]
			private var cm:ContextMenu;

			//画布右键菜单
			[Bindable]
			private var canvasCm:ContextMenu;

			//属性对话框中的数据
			[Bindable]
			private var properties:ArrayCollection=new ArrayCollection();

			public var ID:int=0;

			internal function onload(event:Event):void
			{
				onApplicationReSize(event);
				onContextMenu(event);
				onCanvasContextMenu(event);
			}

			internal function onApplicationReSize(event:Event):void
			{
				if (hdbox != null && vbox != null)
				{
					hdbox.width=this.width - 50;
					hdbox.height=this.height - 80;
					vbox.height=hdbox.height;
					flow.height=vbox.height * 0.95;
					flow.width=vbox.width * 0.95;
				}
			}

			//右键菜单
			internal function onContextMenu(event:Event):void
			{
				cm=new ContextMenu();
				cm.hideBuiltInItems();
				var mentItem1:ContextMenuItem=new ContextMenuItem("删除此项");
				cm.customItems.push(mentItem1);
				mentItem1.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(e:ContextMenuEvent):void
				{
					var pBox:ItemBox=ItemBox(e.contextMenuOwner);

					//pBox.selected = true;//先选中
					//删除所有选中的图标
					removeItemBox(pBox);
				});
			}

			//右击画布弹出的菜单
			internal function onCanvasContextMenu(event:Event):void
			{
//				canvasCm = new ContextMenu();
//				canvasCm.hideBuiltInItems();
//				//全选菜单项
//				var mi_selectAll: ContextMenuItem = new ContextMenuItem("选择全部", true);
//				canvasCm.customItems.push(mi_selectAll);
//				mi_selectAll.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,
//					function(event: ContextMenuEvent): void{
//						drawBorders();
//					});
//				//全不选菜单项
//				var mi_selectNotAll: ContextMenuItem = new ContextMenuItem("全不选");
//				canvasCm.customItems.push(mi_selectNotAll);
//				mi_selectNotAll.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,
//					function(event: ContextMenuEvent): void{
//						clearBorders();
//					});
//				
//				flow.contextMenu = canvasCm;
			}

			private function onCloseWinOpen():void
			{
//				ID=parseInt(TxID.text);
//				WinOpen.visible=false;
			}

			private function onCloseWinSave():void
			{
//				WinSave.visible=false;
			}

			//为指定图标添加边框
			private function drawBorder(img:ItemControl):void
			{
				var rect:RectBorder=new RectBorder(2, 0xFF0000, img.width, img.height, 0x000000, 2, 2);
				img.selected=true; //保存选中状态
				img.addChild(rect);
			}

			/**
			 * 删除画布上所有的图标边框
			 */
			private function drawBorders():void
			{
				var length:int=flow.numChildren;
				var icon:Object=null;
				properties.removeAll();
				for (var i:int=0; i < length; i++)
				{
					icon=flow.getChildAt(i);
					if (icon is ItemControl)
					{
						this.drawBorder(ItemControl(icon));
					}
				}
			}

			//清除所有图标的边框
			private function clearBorders():void
			{
				var currentImage:ItemControl=null;
				for (var i:int=0; i < flow.numChildren; i++)
				{
					if (flow.getChildAt(i) is mx.controls.Image)
					{
						//找到当前的图标
						currentImage=ItemControl(flow.getChildAt(i));
						//找到当前图标带蓝色方框的, 清除该方框
						if (this.hasBorderSprite(currentImage))
						{
							for (var j:int=currentImage.numChildren - 1; j >= 0; j--)
							{
								if (this.hasBorderSprite(currentImage))
								{
									currentImage.selected=false;
									currentImage.removeChildAt(j);
								}
							}
						}
					}
				}
			}

			//检查Image内有没有BorderSprite,以便判断是否有蓝色边框
			private function hasBorderSprite(iconImage:ItemControl):Boolean
			{
				for (var j:int=iconImage.numChildren - 1; j >= 0; j--)
				{
					if (iconImage.getChildAt(j) is RectBorder)
					{
						return true;
					}
				}
				return false;
			}

			private function getItemFromName(strName:String):ItemBox
			{
				var pItem:ItemBox=null;

				var p:TreapEnumerator=pTreapItem.Elements(true);
				while (p.HasMoreElements())
				{
					pItem=ItemBox(p.NextElement());
					if (pItem.name == strName)
					{
						return pItem;
					}
				}
				return null;
			}

			/* 删除多个图标 */
			private function removeIcons(icons:ArrayCollection):void
			{
				var icon:ItemControl=null;
				var length:int=icons.length;
				for (var i:int=0; i < length; i++)
				{
					icon=ItemControl(icons.getItemAt(i));
					this.removeIcon(icon);
				}
			}

			//删除一个图标
			public function removeItemBox(pBox:ItemBox):void
			{
				//var length: int = ItemArray.length;
				var pBoxTmp:ItemBox=null;
				var i:int=0;
				var pPoint:ItemControl=null;

				for (i=0; i < pBox.pControlPoints.length; i++)
				{
					pPoint=pBox.pControlPoints[i];
					this.removeIcon(pPoint);
				}

				//删除事件
				pBox.removeEventListener(IconEvent.ICON_MOUSE_DOWN, onIconMouseDown);
				pBox.removeEventListener(IconEvent.ICON_MOUSE_UP, onIconMouseUp);
				pBox.removeEventListener(IconEvent.ICON_MOVE, onIconMove);
				flow.removeChild(pBox); //删除Item

				//删除Treap中的元素
				var p:TreapEnumerator=pTreapItem.Elements(true);
				pTreapItem.remove(new C_K_Str(pBox.name));

				//清空属性对话框
				properties.removeAll();
			}

			/**
			 * 删除一个图标
			 */
			private function removeIcon(icon:ItemControl):void
			{
				//var length: int = iconArray.length;
				var curIcon:ItemControl=null;
				//删除事件
				icon.removeEventListener(IconEvent.ICON_MOUSE_DOWN, onIconMouseDown);
				icon.removeEventListener(IconEvent.ICON_MOUSE_UP, onIconMouseUp);
				icon.removeEventListener(IconEvent.ICON_MOVE, onIconMove);
				flow.removeChild(icon); //删除图标
				//删除该图标上的所有直线
				//this.removeLines(icon);

				pTreapControl.remove(new C_K_Str(icon.name));


				//清空属性对话框
				properties.removeAll();
			}

			// 删除画布上的所有选中图标
			private function removeIconsFlow():void
			{
				var length:int=flow.numChildren;
				var obj:Object=null;
				for (var i:int=length - 1; i >= 0; i--)
				{
					obj=flow.getChildAt(i);
					if (obj is ItemControl)
					{
						if (obj.selected)
						{
							this.removeIcon(ItemControl(obj));
						}
					}
				}
			}

			private function readFile():void
			{
//				readNode(TxID.text,"Content",onLoadComplete_readNode);
//				readNode(TxID.text,"Name",onLoadComplete_readTitle);
			}

			internal function help():void
			{
//				Web.openURL("http://www.funnyai.com/AI_Publish/FunnyDraw.html","_blank");
			}
		]]>
	</mx:Script>
	<mx:Glow id="glow1"
			 blurXFrom="0"
			 color="0xFF0000"
			 blurXTo="15"
			 blurYFrom="0"
			 blurYTo="15"/>
	<mx:Glow id="glow2"
			 alphaFrom="50"
			 alphaTo="0"
			 blurXFrom="15"
			 color="0x00FF00"
			 blurXTo="0"
			 blurYFrom="15"
			 blurYTo="0"/>
	<mx:HDividedBox x="30"
					y="30"
					width="100%"
					height="100%"
					id="hdbox">
		<mx:VDividedBox width="271"
						height="100%">
			<mx:Panel width="100%"
					  height="300"
					  layout="absolute"
					  title="添加控件">
				<mx:TileList id="icons"
							 doubleClickEnabled="true"
							 x="1"
							 y="0"
							 width="100%"
							 height="162">
					<mx:Object label="选择"
							   icon="@Embed('../asserts/0.png')">
					</mx:Object>
					<mx:Object label="连线"
							   icon="@Embed('../asserts/2.png')">
					</mx:Object>
					<mx:Object label="容器"
							   icon="@Embed('../asserts/1.png')">
					</mx:Object>
					<mx:Object label="节点"
							   icon="@Embed('../asserts/3.png')">
					</mx:Object>
					<mx:Object label="分支"
							   icon="@Embed('../asserts/7.png')">
					</mx:Object>
					<mx:Object label="三角"
							   icon="@Embed('../asserts/4.png')">
					</mx:Object>
					<mx:Object label="角色"
							   icon="@Embed('../asserts/5.png')">
					</mx:Object>
					<mx:Object label="运输"
							   icon="@Embed('../asserts/6.png')">
					</mx:Object>
				</mx:TileList>
			</mx:Panel>
			<mx:Panel width="100%"
					  layout="absolute"
					  title="属性">
				<mx:DataGrid id="dgProp"
							 width="100%"
							 height="100%"
							 editable="true"
							 itemEditEnd="onGridEditEnd(event);">
					<mx:columns>
						<mx:DataGridColumn sortable="false"
										   headerText="名称"
										   width="80"
										   dataField="name"
										   editable="false"/>
						<mx:DataGridColumn sortable="false"
										   headerText="值"
										   rendererIsEditor="true"
										   editorDataField="showValue"
										   editable="true">
							<mx:itemRenderer>
								<mx:Component>
									<local:PropertyEditor/>
								</mx:Component>
							</mx:itemRenderer>
						</mx:DataGridColumn>
					</mx:columns>
					<mx:dataProvider>
						{properties}
					</mx:dataProvider>
				</mx:DataGrid>
			</mx:Panel>
		</mx:VDividedBox>
		<mx:VBox id="vbox"
				 verticalGap="0"
				 height="100%">
			<control:CrossCanvas id="flow"
								 borderStyle="solid"
								 label="设计图"
								 width="100%"
								 height="100%"
								 mouseDown="onDesignCanvasMouseDown(event);">

			</control:CrossCanvas>
		</mx:VBox>
	</mx:HDividedBox>

</mx:Application>
