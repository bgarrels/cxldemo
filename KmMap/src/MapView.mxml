<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   backgroundColor="#a0c1e3"
			   creationComplete="onCreated()"
			   xmlns:ui="ui.window.*"
			   xmlns:core="org.asblog.core.*"
			   xmlns:containers="flexlib.containers.*"
			   xmlns:material="ui.material.*"
			   xmlns:layer="ui.window.layer.*"
			   xmlns:mediaItem="org.asblog.mediaItem.*"
			   xmlns:properties="ui.window.properties.*">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<mx:HDividedBox width="100%"
					height="100%">
		<mx:VDividedBox width="90%"
						height="100%">
			<!--<containers:SuperTabNavigator width="100%"
										  height="100%">-->
			<mx:Canvas backgroundColor="#CCCCCC"
					   label="知识地图"
					   width="100%"
					   height="100%"
					   horizontalScrollPolicy="on"
					   verticalScrollPolicy="on"
					   borderColor="#a0c1e3"
					   borderStyle="solid">
				<!--<core:DesignCanvas id="designCanvas"
								   width="100%"
								   height="100%"
								   verticalScrollPolicy="off"
								   horizontalScrollPolicy="off"
								   verticalCenter="0"
								   horizontalCenter="0"
								   canvasRBG="{propertiesWin.canvasRBG}"
								   transformTarget="transformTarget(event)"
								   backgroundColor="#FFFFFF"/>-->
				<core:DesignCanvas id="designCanvas"
								   width="1750"
								   height="1000"
								   verticalScrollPolicy="off"
								   horizontalScrollPolicy="off"
								   transformTarget="transformTarget(event)"
								   backgroundColor="#FFFFFF"/>
			</mx:Canvas>

		</mx:VDividedBox>

	</mx:HDividedBox>
	<fx:Style source="style/style.css"/>
	<fx:Style>
		@namespace mx "library://ns.adobe.com/flex/mx";  
		mx|ToolTip { fontSize:14}
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import com.adobe.utils.StringUtil;

			import flash.utils.setTimeout;

			import mx.controls.Alert;
			import mx.controls.Button;
			import mx.core.Application;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.managers.BrowserManager;
			import mx.managers.CursorManager;
			import mx.managers.IBrowserManager;
			import mx.managers.PopUpManager;
			import mx.utils.StringUtil;

			import org.asblog.core.History;
			import org.asblog.core.ItemFactory;
			import org.asblog.core.MediaLink;
			import org.asblog.core.MediaObject;
			import org.asblog.core.ShapeLink;
			import org.asblog.core.TextLink;
			import org.asblog.frameworks.ApplicationFacade;
			import org.asblog.frameworks.controller.commandtype.DesignCanvasCT;
			import org.asblog.frameworks.view.BasePropertiesMediator;
			import org.asblog.frameworks.view.DesignCanvasMediator;
			import org.asblog.frameworks.view.LayersManagerMdeiator;
			import org.asblog.frameworks.view.MediaCreatorMediator;
			import org.asblog.mediaItem.MediaImage;
			import org.asblog.mediaItem.MediaLine;
			import org.asblog.mediaItem.MediaShape;
			import org.asblog.mediaItem.MediaText;
			import org.asblog.utils.FileCreateor;
			import org.asblog.utils.LocalImageFileLoader;
			import org.asblog.utils.PopUpUtils;

			import ui.popUpWindow.PopUpPicViewWindow;
			import ui.popUpWindow.PopUpRichTextWindow;
			import ui.popUpWindow.PopUpTaobaoPicViewWindow;
			import ui.popUpWindow.PopUpTaobaoWindow;
			import ui.popUpWindow.PopUpUploadWindow;

			[Bindable("commandChange")]
			private function get hasLastCommand():Boolean
			{
				return facade.hasLastCommand;
			}

			[Bindable("commandChange")]
			private function get hasRedoCommand():Boolean
			{
				return facade.hasRedoCommand;
			}
			private var isTaobaoUser:Boolean;
			private var facade:ApplicationFacade=ApplicationFacade.getInstance();

			public static var contextPath:String;
			public static var mapId:String;

			private function onCreated():void
			{
				Security.allowDomain("*");
				contextPath=FlexGlobals.topLevelApplication.parameters.contextPath;
				mapId=FlexGlobals.topLevelApplication.parameters.mapId;
				init();
//				initXml();

//				textViewOnly();
				var serial:InitXml=new InitXml(contextPath, mapId, designCanvas);
				serial.startInitXml();
			}

//			private function textViewOnly():void{
//				var xml:XML=<Media>
//  <MediaImage obj_id="3CB4388802C27F669A877ACF5C333ED0" x="0" y="0" width="650" height="487" imageWidth="650" imageHeight="487" rotation="0" rotationX="0" rotationY="0" rotationZ="0" rm="" rq="" rk="" startPosition="0" endPosition="1266208" isBackground="1"/>
//  <MediaImage obj_id="15F1DAFE804A1F1C1E467ACF5C232736" x="472" y="583" width="342" height="85" imageWidth="342" imageHeight="85" rotation="0" rotationX="0" rotationY="0" rotationZ="0" rm="" rq="" rk="" startPosition="1266208" endPosition="1382496" isBackground="0"/>
//  <MediaImage obj_id="2B97637C099289B0C3EE7ACF5C2363A0" x="95" y="554" width="274" height="95" imageWidth="274" imageHeight="95" rotation="0" rotationX="0" rotationY="0" rotationZ="0" rm="2" rq="" rk="" startPosition="1382496" endPosition="1486624" isBackground="0"/>
//  <MediaImage obj_id="02EDBDAC0C2C014FA68A7ACF5C23020B" x="584" y="266" width="238" height="93" imageWidth="342" imageHeight="129" rotation="0" rotationX="0" rotationY="0" rotationZ="0" rm="" rq="30019d4c69c042608bb44889138bc547;68875d0dcc1b4428879e653c2953c376" rk="48324ea6e64841039a8cfcf05d887868;abe61df44dde411e9fbb981dbd298afc" startPosition="1486624" endPosition="1663104" isBackground="0"/>
//  <MediaImage obj_id="1057584F1DFDE21413B97ACF5C23619A" x="595" y="35" width="182" height="57" imageWidth="182" imageHeight="57" rotation="0" rotationX="0" rotationY="0" rotationZ="0" rm="" rq="" rk="" startPosition="1663104" endPosition="1704608" isBackground="0"/>
//  <MediaImage obj_id="8BD56D17C3E13579C20B7ACF5C2330AF" x="611" y="141" width="193" height="82" imageWidth="193" imageHeight="82" rotation="0" rotationX="0" rotationY="0" rotationZ="0" rm="" rq="" rk="" startPosition="1704608" endPosition="1767920" isBackground="0"/>
//  <MediaText obj_id="973EABCD2EE4F3D31E9E716CE65D3850" x="274" y="363" width="116" height="98.4" rotation="0" rotationX="0" rotationY="0" rotationZ="0" text="MVC" scaleX="1.15997314453125" scaleY="4.0999908447265625" fontColor="255" fontSize="18"/>
//  <MediaText obj_id="9D0B9B53C5E751893E097166AE31A66D" x="253" y="107" width="128" height="80.05" rotation="0" rotationX="0" rotationY="0" rotationZ="0" text="ORM" scaleX="1.27996826171875" scaleY="4.0032196044921875" fontColor="13369548" fontSize="14"/>
//  <MediaShape obj_id="E7864CC3B0057F052D8E7526EE564036" shapType="rect" x="38" y="207" width="168" height="168" rotation="0" rotationX="0" rotationY="0" rotationZ="0" rm="" rq="" rk=""/>
//  <MediaLine shapType="MediaLine" fromX="470" fromY="132" toX="575" toY="60"/>
//  <MediaLine shapType="MediaLine" fromX="480" fromY="170" toX="585" toY="161"/>
//  <MediaLine shapType="MediaLine" fromX="458" fromY="205" toX="558" toY="277"/>
//  <MediaLine shapType="MediaLine" fromX="241" fromY="463" toX="180" toY="527"/>
//  <MediaLine shapType="MediaLine" fromX="398" fromY="459" toX="588" toY="558"/>
//</Media>;
//				var MediaShapeList:XMLList=xml.MediaShape;
//				var hasImg:Boolean=false;
//				for each (var elementXml:XML in xml.MediaShape)
//				{
//					var shapeLink:ShapeLink=new ShapeLink();
//					shapeLink.classRef=MediaShape;
//					shapeLink.shapType=elementXml.@shapType;
//					shapeLink.x=elementXml.@x;
//					shapeLink.y=elementXml.@y;
//					shapeLink.width=elementXml.@width;
//					shapeLink.height=elementXml.@height;
//					shapeLink.rotation=elementXml.@rotation;
//					shapeLink.rotationX=elementXml.@rotationX;
//					shapeLink.rotationY=elementXml.@rotationY;
//					shapeLink.rotationZ=elementXml.@rotationZ;
//					shapeLink.rk=elementXml.@rk;
//					shapeLink.rm=elementXml.@rm;
//					shapeLink.rq=elementXml.@rq;
//					shapeLink.obj_id=elementXml.@obj_id;
//					facade.sendNotification(DesignCanvasCT.CMD_ADD_MEDIAOBJECT, shapeLink);
//				}
//				for each (var elementXml4:XML in xml.MediaImage)
//				{
//					var obj:Object=new Object();
//					obj.startPosition=uint(elementXml4.@startPosition);
//					obj.endPosition=uint(elementXml4.@endPosition);
//					obj.x=Number(elementXml4.@x);
//					obj.y=Number(elementXml4.@y);
//					obj.width=Number(elementXml4.@width);
//					obj.height=Number(elementXml4.@height);
//					obj.rk=elementXml4.@rk;
//					obj.rm=elementXml4.@rm;
//					obj.rq=elementXml4.@rq;
//					obj.isBackground = elementXml4.@isBackground;
//					designCanvas.imageID_position_dictionary[String(elementXml4.@obj_id)]=obj;
//					hasImg=true;
//				}
//				for each (var elementXml2:XML in xml.MediaText)
//				{
//					var textLink:TextLink=new TextLink();
//					textLink.classRef=MediaText;
//					textLink.x=elementXml2.@x;
//					textLink.y=elementXml2.@y;
//					//					textLink.width=elementXml2.@width;
//					//					textLink.height=elementXml2.@height;
//					textLink.obj_id=elementXml2.@obj_id;
//					textLink.text=elementXml2.@text;
//					textLink.scaleX=elementXml2.@scaleX;
//					textLink.scaleY=elementXml2.@scaleY;
//					textLink.rotation=elementXml2.@rotation;
//					textLink.rotationX=elementXml2.@rotationX;
//					textLink.rotationY=elementXml2.@rotationY;
//					textLink.rotationZ=elementXml2.@rotationZ;
//					textLink.fontColor= elementXml2.@fontColor;
//					textLink.fontSize= elementXml2.@fontSize;
//					facade.sendNotification(DesignCanvasCT.CMD_ADD_MEDIAOBJECT, textLink);
//				}
//				for each (var elementXml3:XML in xml.MediaLine)
//				{
//					var mediaLine:MediaLine=new MediaLine();
//					//					mediaLine.obj_id=elementXml3.@obj_id;
//					mediaLine.fromX=elementXml3.@fromX;
//					mediaLine.fromY=elementXml3.@fromY;
//					mediaLine.toY=elementXml3.@toY;
//					mediaLine.toX=elementXml3.@toX;
//					
//					
//					this.designCanvas.canvasContent.addChild(mediaLine);
//					this.designCanvas.lineList.addItem(mediaLine);
//					mediaLine.designCanvas=this.designCanvas;
//					mediaLine.draw();
//				}
//			}



			private function resultSave(event:Event):void
			{
				CursorManager.removeBusyCursor();
			}

			private function init():void
			{

//				facade.registerMediator(new MediaCreatorMediator(this));
				facade.registerMediator(new DesignCanvasMediator(designCanvas));
//				facade.registerMediator(new LayersManagerMdeiator(layersManager));
//				facade.registerMediator(new BasePropertiesMediator(propertiesWin));
//				var win:PopUpTaobaoWindow
//				win = PopUpManager.createPopUp(this, PopUpTaobaoWindow,true) as PopUpTaobaoWindow	
			}

			public function popUpViewPic(myData:*):void
			{
				var win:PopUpTaobaoPicViewWindow;
				win=PopUpManager.createPopUp(this, PopUpTaobaoPicViewWindow, true) as PopUpTaobaoPicViewWindow
				win.myData=myData;
			}

			private function creatPic():void
			{
				designCanvas.setSelection(null);
				FileCreateor.createImage(designCanvas);
				CursorManager.removeBusyCursor();
			}


			private function transformTarget(event:Event):void
			{
				//发送此事件，用来更新选中元素的属性
//				propertiesWin.dispatchEvent(new Event("targetChange"))
			}



			private function changeCanvasWT():void
			{
//				var oldWT:Object={w: designCanvas.width, h: designCanvas.height};
//				var newWT:Object={w: int(canvasW.text), h: int(canvasH.text)};
//				var classRef:Class=getDefinitionByName("org.asblog.core.History") as Class;
//				var history:*=new classRef(oldWT, newWT)
//				facade.sendNotification(DesignCanvasCT.CMD_CHANGE_CANVASWH, history);
			}

			protected function canvasW_enterHandler(event:FlexEvent):void
			{
				changeCanvasWT();
			}


			protected function canvasH_enterHandler(event:FlexEvent):void
			{
				changeCanvasWT();
			}
		]]>
	</fx:Script>
</s:Application>
